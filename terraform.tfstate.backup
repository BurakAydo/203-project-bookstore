{
  "version": 4,
  "terraform_version": "1.4.2",
  "serial": 45,
  "lineage": "37d79249-aae2-5e28-3c86-3fced399b394",
  "outputs": {
    "website": {
      "value": "http://44.200.18.71",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "docker-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-00c39f71452c08778",
            "arn": "arn:aws:ec2:us-east-1:557285914455:instance/i-0602d1ed499cab437",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1c",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0602d1ed499cab437",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "babaydar",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 2,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-0f5c7e89f27fc146e",
            "private_dns": "ip-172-31-15-55.ec2.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.15.55",
            "public_dns": "ec2-44-200-18-71.compute-1.amazonaws.com",
            "public_ip": "44.200.18.71",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 3000,
                "kms_key_id": "",
                "tags": {},
                "throughput": 125,
                "volume_id": "vol-0a5b0cff8272200ca",
                "volume_size": 8,
                "volume_type": "gp3"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "docker-sec-grp-project"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0b9977842b4da5e9a",
            "tags": {
              "Name": "Web server of bookstore"
            },
            "tags_all": {
              "Name": "Web server of bookstore"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "7200e7dfe9ecbbcbeb980d02bf35bffffe1044ce",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-0bdce85bce9645976"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_security_group.tf-docker-sec-grp",
            "github_repository.myrepo",
            "github_repository_file.app-files"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "tf-docker-sec-grp",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:557285914455:security-group/sg-0bdce85bce9645976",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0bdce85bce9645976",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "docker-sec-grp-project",
            "name_prefix": "",
            "owner_id": "557285914455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "bookstore-sec-grp"
            },
            "tags_all": {
              "Name": "bookstore-sec-grp"
            },
            "timeouts": null,
            "vpc_id": "vpc-04c346d084632f335"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_branch_default",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "id": "bookstore-api-project",
            "rename": false,
            "repository": "bookstore-api-project"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_repository",
      "name": "myrepo",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow_auto_merge": false,
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "allow_update_branch": false,
            "archive_on_destroy": null,
            "archived": false,
            "auto_init": true,
            "default_branch": "main",
            "delete_branch_on_merge": false,
            "description": "",
            "etag": "W/\"af8bb20024e6871eb5731b847896200520ca96c70569da84575e7a883c62d093\"",
            "full_name": "BurakAydo/bookstore-api-project",
            "git_clone_url": "git://github.com/BurakAydo/bookstore-api-project.git",
            "gitignore_template": null,
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage_url": "",
            "html_url": "https://github.com/BurakAydo/bookstore-api-project",
            "http_clone_url": "https://github.com/BurakAydo/bookstore-api-project.git",
            "id": "bookstore-api-project",
            "ignore_vulnerability_alerts_during_read": null,
            "is_template": false,
            "license_template": null,
            "merge_commit_message": "PR_TITLE",
            "merge_commit_title": "MERGE_MESSAGE",
            "name": "bookstore-api-project",
            "node_id": "R_kgDOJPSxrA",
            "pages": [],
            "private": true,
            "repo_id": 620016044,
            "security_and_analysis": [],
            "squash_merge_commit_message": "COMMIT_MESSAGES",
            "squash_merge_commit_title": "COMMIT_OR_PR_TITLE",
            "ssh_clone_url": "git@github.com:BurakAydo/bookstore-api-project.git",
            "svn_url": "https://github.com/BurakAydo/bookstore-api-project",
            "template": [],
            "topics": null,
            "visibility": "private",
            "vulnerability_alerts": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_repository_file",
      "name": "app-files",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "index_key": "Dockerfile",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": null,
            "commit_email": null,
            "commit_message": "managed by terraform",
            "commit_sha": "907ca4d148b1c630ec68cba4f3475d175d096b20",
            "content": "FROM python:alpine\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nEXPOSE 80\nCMD python ./app.py",
            "file": "Dockerfile",
            "id": "bookstore-api-project/Dockerfile",
            "overwrite_on_create": true,
            "repository": "bookstore-api-project",
            "sha": "b3eacfd968c0129a080dbb69d8de0248c5e7eb55"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "bookstore-api.py",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": null,
            "commit_email": null,
            "commit_message": "managed by terraform",
            "commit_sha": "0dad71dbcfd670dd35accb12098af423f63a31bd",
            "content": "# Import Flask modules\nfrom flask import Flask, jsonify, abort, request, make_response\nfrom flaskext.mysql import MySQL\n\n# Create an object named app \napp = Flask(__name__)\n\n# Configure sqlite database\napp.config['MYSQL_DATABASE_HOST'] = 'database'\napp.config['MYSQL_DATABASE_USER'] = 'babaydar'\napp.config['MYSQL_DATABASE_PASSWORD'] = 'babaydar_123'\napp.config['MYSQL_DATABASE_DB'] = 'bookstore_db'\napp.config['MYSQL_DATABASE_PORT'] = 3306\nmysql = MySQL()\nmysql.init_app(app)\nconnection = mysql.connect()\nconnection.autocommit(True)\ncursor = connection.cursor()\n\n# Write a function named `init_bookstore_db` which initilazes the bookstore db\n# Create books table within sqlite db and populate with sample data\n# Execute the code below only once.\ndef init_bookstore_db():\n    drop_table = 'DROP TABLE IF EXISTS bookstore_db.books;'\n    books_table = \"\"\"\n    CREATE TABLE bookstore_db.books(\n    book_id INT NOT NULL AUTO_INCREMENT,\n    title VARCHAR(100) NOT NULL,\n    author VARCHAR(100),\n    is_sold BOOLEAN NOT NULL DEFAULT 0,\n    PRIMARY KEY (book_id)\n    )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n    \"\"\"\n    data = \"\"\"\n    INSERT INTO bookstore_db.books (title, author, is_sold)\n    VALUES\n        (\"Where the Crawdads Sing\", \"Delia Owens\", 1 ),\n        (\"The Vanishing Half: A Novel\", \"Brit Bennett\", 0),\n        (\"1st Case\", \"James Patterson, Chris Tebbetts\", 0);\n    \"\"\"\n    cursor.execute(drop_table)\n    cursor.execute(books_table)\n    cursor.execute(data)\n\n# Write a function named `get_all_books` which gets all books from the books table in the db,\n# and return result as list of dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef get_all_books():\n    query = \"\"\"\n    SELECT * FROM books;\n    \"\"\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    books =[{'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])} for row in result]\n    return books\n\n# Write a function named `find_book` which finds book using book_id from the books table in the db,\n# and return result as list of dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef find_book(id):\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={id};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n    book = None\n    if row is not None:\n        book = {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\n    return book\n\n\n# Write a function named `insert_book` which inserts book into the books table in the db,\n# and return the newly added book as dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef insert_book(title, author):\n    insert = f\"\"\"\n    INSERT INTO books (title, author)\n    VALUES ('{title}', '{author}');\n    \"\"\"\n    cursor.execute(insert)\n\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={cursor.lastrowid};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n\n    return {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\n\n# Write a function named `change_book` which updates book into the books table in the db,\n# and return updated added book as dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef change_book(book):\n    update = f\"\"\"\n    UPDATE books\n    SET title='{book['title']}', author = '{book['author']}', is_sold = {book['is_sold']}\n    WHERE book_id= {book['book_id']};\n    \"\"\"\n    cursor.execute(update)\n\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={book['book_id']};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n    return {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\n\n# Write a function named `remove_book` which removes book from the books table in the db,\n# and returns True if successfully deleted or False.\ndef remove_book(book):\n    delete = f\"\"\"\n    DELETE FROM books\n    WHERE book_id= {book['book_id']};\n    \"\"\"\n    cursor.execute(delete)\n\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={book['book_id']};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n    return True if row is None else False\n\n\n# Write a function named `home` which returns 'Welcome to the Callahan's Bookstore API Service',\n# and assign to the static route of ('/')\n@app.route('/')\ndef home():\n    return \"Welcome to Callahan's Bookstore API Service\"\n\n# Write a function named `get_books` which returns all books in JSON format for `GET`,\n# and assign to the static route of ('/books')\n@app.route('/books', methods=['GET'])\ndef get_books():\n    return jsonify({'books':get_all_books()})\n\n\n# Write a function named `get_books` which returns the book with given book_id in JSON format for `GET`,\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\n@app.route('/books/\u003cint:book_id\u003e', methods = ['GET'])\ndef get_book(book_id):\n    book = find_book(book_id)\n    if book == None:\n        abort(404)\n    return jsonify({'book found': book})\n\n# Write a function named `add_book` which adds new book using `POST` methods,\n# and assign to the static route of ('/books')\n@app.route('/books', methods=['POST'])\ndef add_book():\n    if not request.json or not 'title' in request.json:\n        abort(400)\n    return jsonify({'newly added book':insert_book(request.json['title'], request.json.get('author', ''))}), 201\n\n# Write a function named `update_book` which updates an existing book using `PUT` method,\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\n@app.route('/books/\u003cint:book_id\u003e', methods=['PUT'])\ndef update_book(book_id):\n    book = find_book(book_id)\n    if book == None:\n        abort(404)\n    if not request.json:\n        abort(400)\n    book['title'] = request.json.get('title', book['title'])\n    book['author'] = request.json.get('author', book['author'])\n    book['is_sold'] = int(request.json.get('is_sold', int(book['is_sold'])))\n    return jsonify({'updated book': change_book(book)})\n\n# Write a function named `delete_book` which updates an existing book using `DELETE` method,\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\n@app.route('/books/\u003cint:book_id\u003e', methods=['DELETE'])\ndef delete_book(book_id):\n    book = find_book(book_id)\n    if book == None:\n        abort(404)\n    return jsonify({'result':remove_book(book)})\n\n# Write a function named `not_found` for handling 404 errors which returns 'Not found' in JSON format.\n@app.errorhandler(404)\ndef not_found(error):\n    return make_response(jsonify({'error': 'Not found'}), 404)\n\n# Write a function named `bad_request` for handling 400 errors which returns 'Bad Request' in JSON format.\n@app.errorhandler(400)\ndef bad_request(error):\n    return make_response(jsonify({'error': 'Bad request'}), 400)\n\n\n# Add a statement to run the Flask application which can be reached from any host on port 80.\nif __name__== '__main__':\n    init_bookstore_db()\n    app.run(host='0.0.0.0', port=80)",
            "file": "bookstore-api.py",
            "id": "bookstore-api-project/bookstore-api.py",
            "overwrite_on_create": true,
            "repository": "bookstore-api-project",
            "sha": "a99e5c376d3de672b34fd8617eff971e3f8530c8"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "docker-compose.yml",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": null,
            "commit_email": null,
            "commit_message": "managed by terraform",
            "commit_sha": "3edc567131b0852e989a5ecf13b6256ce86320c0",
            "content": "version: '3.7'\n\nservices:\n  database:\n    image: mysql:5.7\n\n    container_name: babaydar_db\n\n    environment:\n\n      MYSQL_ROOT_PASSWORD: p123456p\n      MYSQL_DATABASE: bookstore_db\n      MYSQL_USER: babaydar\n      MYSQL_PASSWORD: babaydar_123\n\n    networks:\n      - mynet\n\n\n  myapp:\n    image: babaydar/bookstoreapi:latest\n    container_name: myapp\n    restart: always\n    depends_on:\n      - database\n    ports:\n      - 80:80\n    networks:\n      - mynet\n\nnetworks:\n  mynet:\n    driver: bridge\n\n\n\n",
            "file": "docker-compose.yml",
            "id": "bookstore-api-project/docker-compose.yml",
            "overwrite_on_create": true,
            "repository": "bookstore-api-project",
            "sha": "f483475b44ee07a2c54f6fc2b8aa23c783592390"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "requirements.txt",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": null,
            "commit_email": null,
            "commit_message": "managed by terraform",
            "commit_sha": "c6f84f547ae6bedd4e0834f4909ebd05f9ead423",
            "content": "flask\nflask-mysql",
            "file": "requirements.txt",
            "id": "bookstore-api-project/requirements.txt",
            "overwrite_on_create": true,
            "repository": "bookstore-api-project",
            "sha": "e7a444cb09a82b526987c2edb129559d3a2ea0c5"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
